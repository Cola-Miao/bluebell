{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample bbs server.",
        "title": "Bluebell",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "0.4.7"
    },
    "host": "localhost:5912",
    "basePath": "/",
    "paths": {
        "/article": {
            "get": {
                "description": "get article list, need input offset and (page)size in query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "community"
                ],
                "summary": "Get article list without content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mysql.bluebell.article offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "page size",
                        "name": "size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/article/{uuid}": {
            "get": {
                "description": "get path uuid specified article's information from mysql.bluebell.article",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "community"
                ],
                "summary": "Get article information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "article's uuid",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/article_vote": {
            "post": {
                "description": "vote 0~5 score for article\nvoter will store to zset article:voter:{article_uuid}\nrepeat vote be checked and got correct score\nvote for expired article will be refuse",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "community",
                    "auth"
                ],
                "summary": "vote form article",
                "parameters": [
                    {
                        "description": "article_uuid and score ",
                        "name": "voteForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.FormVote"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/community": {
            "get": {
                "description": "get community list from mysql.bluebell.community",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "community"
                ],
                "summary": "Get community list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/community/{id}": {
            "get": {
                "description": "get article list, need input community_id in path and offset ,(page)size in query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "community"
                ],
                "summary": "Get specified community's article list without content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "community id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "mysql.bluebell.article offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "page size",
                        "name": "size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/community/{name}": {
            "get": {
                "description": "get path specified community's information from mysql.bluebell.community",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "community"
                ],
                "summary": "Get community information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "specified community",
                        "name": "community_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/create_article": {
            "post": {
                "description": "only need get article title and content from request body\nadd creator id, name and generate uuid, introduction to article info\nstore to mysql.bluebell.article, at this time add create_at and update_at\nadd article_uuid to zset article:time and article:score",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "community",
                    "auth"
                ],
                "summary": "Create article",
                "parameters": [
                    {
                        "description": "article information",
                        "name": "article",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Article"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/create_community": {
            "post": {
                "description": "check community_name whether to repeat\ncreate a new community, default admin is creator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "community",
                    "auth"
                ],
                "summary": "Create community",
                "parameters": [
                    {
                        "description": "community name \u0026 introduction",
                        "name": "community",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Community"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "get login info json from request body\nvalidate username existed, the length of data and compare password\ngenerate and set jwt to cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User Login Form",
                        "name": "LoginForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.FormLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "login successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "get signup info json from request body\nvalidate username existed, the length of data and re-password\ncreate new user with encode password to mysql.bluebell.user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "User Signup",
                "parameters": [
                    {
                        "description": "User Signup Form",
                        "name": "SignupForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.FormSignup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "signup successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Article": {
            "type": "object",
            "required": [
                "community_id",
                "content",
                "title"
            ],
            "properties": {
                "author": {
                    "type": "string"
                },
                "authorUUID": {
                    "type": "integer"
                },
                "community_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string",
                    "example": "if too long will got a truncated introduction"
                },
                "createAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "introduction": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "title": {
                    "type": "string",
                    "maxLength": 32,
                    "example": "testTitle"
                },
                "updateAt": {
                    "type": "string"
                },
                "uuid": {
                    "type": "integer"
                }
            }
        },
        "model.Community": {
            "type": "object",
            "required": [
                "introduction",
                "name"
            ],
            "properties": {
                "adminUUID": {
                    "type": "integer"
                },
                "administrator": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "introduction": {
                    "type": "string",
                    "maxLength": 512
                },
                "name": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 1
                }
            }
        },
        "model.FormLogin": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "testPassword"
                },
                "username": {
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 1,
                    "example": "testName"
                }
            }
        },
        "model.FormSignup": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "testPassword"
                },
                "rePassword": {
                    "type": "string",
                    "example": "testPassword"
                },
                "username": {
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 1,
                    "example": "testName"
                }
            }
        },
        "model.FormVote": {
            "type": "object",
            "required": [
                "score",
                "uuid"
            ],
            "properties": {
                "score": {
                    "type": "number",
                    "maximum": 5,
                    "minimum": 1,
                    "example": 4
                },
                "uuid": {
                    "type": "integer",
                    "example": 1781231541096022016
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}